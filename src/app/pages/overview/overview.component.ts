import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';
import { ChartConfiguration, ChartType } from 'chart.js';
import { CommonServiceService } from 'src/app/services/common-service.service';
import { SignumCRMApiService } from 'src/app/services/signum-crmapi.service';
import DataLabelsPlugin from 'chartjs-plugin-datalabels';
import { LanguageService } from 'src/app/core/services/language.service';
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { EventService } from 'src/app/core/services/event.service';
import Swal from 'sweetalert2';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
@Component({
  selector: 'app-overview',
  templateUrl: './overview.component.html',
  styleUrls: ['./overview.component.scss']
})
export class OverviewComponent implements OnInit {
  viewFilterBtn: boolean = false;

  graphRevenueResponse: any[] = [];
  graphLyRevenueResponse: any[] = [];
  graphDatalabel: any[] = [];
  isLoading: boolean = false;
  model: any = {};
  responseData: any[] = [];
  selectedlang: string;
  branchCount: number = 0;

  selectedChart: string = "";
  LayoutMode: string = "";
  isChartSelected: boolean = true;
  firstChartrow: boolean = true;
  secondChartrow: boolean = true;
  date = new Date();
  Curryear = this.date.getFullYear();
  userBranches: string = ''
  constructor(
    private dataServe: SignumCRMApiService,
    private commonService: CommonServiceService,
    private langService: LanguageService,
    private eventService: EventService,
    private modalService: NgbModal
  ) {
    this.selectedlang = this.langService.getLanguage()
    this.model.UserName = localStorage.getItem('username');
    this.getbranchList() //get branch list
    this.model.revtooltip = 'Revenue refers to the total amount of money that a company or organization earns from its business activities, such as selling goods or services, over a specific period of time.'
    this.model.GMtooltip = "Gross margin is a financial metric that represents the difference between a company's net sales revenue and the cost of goods sold (COGS)"
    this.model.GMPtooltip = "It is calculated by subtracting the COGS from the total revenue and then dividing the result by the total revenue. The resulting percentage is the gross margin percentage."
    this.model.stocktooltip = "Stock value in inventory refers to the total monetary value of the goods or products held in a company's inventory at a particular point in time. It represents the cost of the inventory that a company has on hand, including raw materials, work-in-progress items, and finished goods."
    this.model.ASPtooltip = "Average Selling Price (ASP) refers to the average price at which a company sells its products or services to customers. It is calculated by dividing the total revenue generated by the total number of units sold during a specific period."
    this.model.STORtooltip = `Stock Turnover Ratio, also known as inventory turnover ratio, is a financial metric used to measure the number of times a company sells and replaces its inventory over a specific period. It is calculated by dividing the cost of goods sold (COGS) by the average value of inventory during the period.
    The formula for the Stock Turnover Ratio is:
    Stock Turnover Ratio = Cost of Goods Sold / Average Inventory`
  }
  ngOnInit(): void {
    // localStorage.setItem('userBranches', 'overview');
    this.getLayoutMode() //theme layoutmode
    this.getRolebasedGraphData();
  }
  ngOnDestroy() {
    // localStorage.removeItem('userBranches')
  }
  closeResult = '';


  open(content: any) {
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' }).result.then(
      (result) => {
        this.closeResult = `Closed with: ${result}`;
      },
      (reason) => {
        // this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
      },
    );
  }
  closeModal() {
    this.modalService.dismissAll()
  }

  /**purpose: get branch list from api */
  getbranchList() {
    
  }

  @ViewChild("content", { static: true }) el!: ElementRef<HTMLImageElement>;
  exportPdf() {
    html2canvas(this.el.nativeElement).then((canvas) => {
      const imgData = canvas.toDataURL("image/jpeg");
      const pdf = new jsPDF({
        orientation: "portrait",
      });
      const imageProps = pdf.getImageProperties(imgData);
      const pdfw = pdf.internal.pageSize.getWidth();
      const pdfh = (imageProps.height * pdfw) / imageProps.width;
      pdf.addImage(imgData, "PNG", 0, 0, pdfw, pdfh);
      pdf.save("screen.pdf");
    });
  }

  /**purpose: refresh button click */
  refreshBtnClick() {
    this.getRolebasedGraphData();
  }

  exportbtnClick() {
    this.commonService.exportExcel(this.model.responseData, 'Overview');
  }

  /**purpose: To view only selected chart in content section*/
  selectChartView(param: string) {
    if (param) this.selectedChart = param;
    this.isChartSelected = !this.isChartSelected;
    if (param && (param == "Revenue" || param == "GrossMargin" || param == "GrossMarginPerc")) {
      this.secondChartrow = false;
    } else if (param && (param == "StockValue" || param == "AverageTicketSize" || param == "storValue")) {
      this.firstChartrow = false;
      this.secondChartrow = true;
    }
    if (this.isChartSelected == true) {
      this.firstChartrow = true;
      this.secondChartrow = true;
    }

  }

  /** get Rolebased GraphData function */
  getRolebasedGraphData() {
    this.isLoading = true;
    this.dataServe.getRoleBaseKpiChartData().then((response: any) => {
      this.isLoading = false;
      if (response) {
        this.graphRevenueResponse = []
        this.graphDatalabel = []
        this.model.responseData = []

        let lY_GROSS_MARGIN: any[] = []
        let grosS_MARGIN: any[] = []

        let lY_GROSS_MARGIN_PERC: any[] = []
        let grosS_MARGIN_PERC: any[] = []

        let lY_STOCK_VALUE: any[] = []
        let stocK_VALUE: any[] = []

        let lY_AVERAGE_TICKET_SIZE: any[] = []
        let averagE_TICKET_SIZE: any[] = []

        let stoR_VALUE: any[] = []
        let lY_STOR_VALUE: any[] = []

        let numbeR_OF_CUSTOMERS: any[] = []
        let lY_NUMBER_OF_CUSTOMERS: any[] = []
        let QUANTITY_SUM: any[] = []

        // data = response.rolebasedKPIAttributes;
        this.model.responseData = response.dynamicData[0];
        this.model.stock_Avg = this.model.responseData.map((item: any) => item.STOCK_VALUE)
        this.model.LYstock_Avg = this.model.responseData.map((item: any) => item.LY_STOCK_VALUE)
        this.model.ASP_value = this.model.responseData.map((item: any) => item.AVERAGE_TICKET_SIZE)
        this.model.LYASP_value = this.model.responseData.map((item: any) => item.LY_AVERAGE_TICKET_SIZE)
        this.model.LY_NUMBER_CUSTOMERS = this.model.responseData.map((item: any) => item.LY_NUMBER_OF_CUSTOMERS)
        this.model.TARGET_REVENUE = this.model.responseData.map((item: any) => item.TARGET_REVENUE)
        //GROUP DATA BY BRANCH AND MONTH
        var monthResult: any = []
        var branchResult: any = []
        this.model.responseData.reduce(function (res: any, value: any) {
          if (!res[value.MONTH]) {
            res[value.MONTH] = {
              MONTH: value.MONTH,
              MONTHNO: Number(value.MONTHNO),
              REVENUE: 0,
              LY_REVENUE: 0,
              GROSS_MARGIN: 0,
              LY_GROSS_MARGIN: 0,
              GROSS_MARGIN_PERC: [[], []],
              LY_GROSS_MARGIN_PERC: [[], []],
              STOCK_VALUE: 0,
              LY_STOCK_VALUE: 0,
              AVERAGE_TICKET_SIZE: 0,
              LY_AVERAGE_TICKET_SIZE: [],
              STOR_VALUE: 0,
              LY_STOR_VALUE: 0,
              NUMBER_OF_CUSTOMERS: 0,
              LY_NUMBER_OF_CUSTOMERS: 0,
              COUNT_DAYS: 0,
              COGS: 0,
              QUANTITY: 0,
            };
            monthResult.push(res[value.MONTH])
          }
          if (!res[value.BRANCH]) {
            res[value.BRANCH] = {
              BRANCH: value.BRANCH,
              NUMBER_OF_CUSTOMERS: 0,
              LY_NUMBER_OF_CUSTOMERS: 0,
            };
            branchResult.push(res[value.BRANCH])
          }
          res[value.MONTH].REVENUE += value.REVENUE;
          res[value.MONTH].LY_REVENUE += value.LY_REVENUE;
          res[value.MONTH].GROSS_MARGIN += value.GROSS_MARGIN;
          res[value.MONTH].LY_GROSS_MARGIN += value.LY_GROSS_MARGIN;
          res[value.MONTH].GROSS_MARGIN_PERC[0].push(value.GROSS_MARGIN)
          res[value.MONTH].GROSS_MARGIN_PERC[1].push(value.REVENUE)
          res[value.MONTH].LY_GROSS_MARGIN_PERC[0].push(value.LY_GROSS_MARGIN)
          res[value.MONTH].LY_GROSS_MARGIN_PERC[1].push(value.LY_REVENUE)
          res[value.MONTH].STOCK_VALUE += value.STOCK_VALUE;
          res[value.MONTH].LY_STOCK_VALUE += value.LY_STOCK_VALUE;
          res[value.MONTH].AVERAGE_TICKET_SIZE += value.AVERAGE_TICKET_SIZE;
          res[value.MONTH].LY_AVERAGE_TICKET_SIZE.push(value.LY_AVERAGE_TICKET_SIZE);
          res[value.MONTH].STOR_VALUE += value.STOR_VALUE;
          res[value.MONTH].LY_STOR_VALUE += value.LY_STOR_VALUE;
          res[value.MONTH].NUMBER_OF_CUSTOMERS += value.NUMBER_OF_CUSTOMERS;
          res[value.MONTH].LY_NUMBER_OF_CUSTOMERS += value.LY_NUMBER_OF_CUSTOMERS;
          res[value.MONTH].COUNT_DAYS += value.COUNT_DAYS;
          res[value.MONTH].COGS += value.COGS;
          res[value.MONTH].QUANTITY += value.QUANTITY;
          res[value.BRANCH].NUMBER_OF_CUSTOMERS += value.NUMBER_OF_CUSTOMERS;
          res[value.BRANCH].LY_NUMBER_OF_CUSTOMERS += value.LY_NUMBER_OF_CUSTOMERS;
          return res;
        }, {});
        this.model.branchData = branchResult
        monthResult = monthResult.sort((a: any, b: any) => a.MONTHNO - b.MONTHNO);
        this.graphDatalabel = [...new Set(monthResult.map((item: any) => item.MONTH))];
        monthResult.forEach((element: any) => {
          // element.QUANTITY = this.commonService.sumArray(element.QUANTITY)
          element.AVERAGE_TICKET_SIZE = Math.trunc(element.REVENUE / element.QUANTITY)
          element.LY_AVERAGE_TICKET_SIZE = this.commonService.avgOfArray(element.LY_AVERAGE_TICKET_SIZE)
          element.LY_AVERAGE_TICKET_SIZE = Math.trunc(element.LY_AVERAGE_TICKET_SIZE)
          element.GROSS_MARGIN_PERC = this.commonService.sumArray(element.GROSS_MARGIN_PERC[0]) / this.commonService.sumArray(element.GROSS_MARGIN_PERC[1]) * 100
          element.GROSS_MARGIN_PERC = Math.trunc(element.GROSS_MARGIN_PERC)
          element.LY_GROSS_MARGIN_PERC = this.commonService.sumArray(element.LY_GROSS_MARGIN_PERC[0]) / this.commonService.sumArray(element.LY_GROSS_MARGIN_PERC[1]) * 100
          element.LY_GROSS_MARGIN_PERC = Math.trunc(element.LY_GROSS_MARGIN_PERC)
          if (element.STOCK_VALUE > 0) {
            element.STOR_VALUE = (element.REVENUE - element.GROSS_MARGIN) / element.STOCK_VALUE 
            element.LY_STOR_VALUE = (element.LY_REVENUE - element.LY_GROSS_MARGIN) / element.LY_STOCK_VALUE 
          }
        })
        this.model.monthResult = monthResult

        monthResult.map((element: any) => {
          this.graphRevenueResponse.push(element.REVENUE)
          this.graphLyRevenueResponse.push(element.LY_REVENUE)
          grosS_MARGIN.push(element.GROSS_MARGIN)
          lY_GROSS_MARGIN.push(element.LY_GROSS_MARGIN)

          grosS_MARGIN_PERC.push(element.GROSS_MARGIN_PERC)
          lY_GROSS_MARGIN_PERC.push(element.LY_GROSS_MARGIN_PERC)

          stocK_VALUE.push(Math.trunc(element.STOCK_VALUE))
          lY_STOCK_VALUE.push(Math.trunc(element.LY_STOCK_VALUE))

          averagE_TICKET_SIZE.push(element.AVERAGE_TICKET_SIZE)
          lY_AVERAGE_TICKET_SIZE.push(element.LY_AVERAGE_TICKET_SIZE)

          stoR_VALUE.push(element.STOR_VALUE)
          lY_STOR_VALUE.push(element.LY_STOR_VALUE)

          numbeR_OF_CUSTOMERS.push(element.NUMBER_OF_CUSTOMERS)
          lY_NUMBER_OF_CUSTOMERS.push(element.LY_NUMBER_OF_CUSTOMERS)
          QUANTITY_SUM.push(element.QUANTITY)
        })

        //find sum
        this.model.revenueSum = this.commonService.sumArray(this.graphRevenueResponse)
        this.model.QUANTITYSum = this.commonService.sumArray(QUANTITY_SUM)
        this.model.grosS_MARGIN = this.commonService.sumArray(grosS_MARGIN)
        this.model.grosS_MARGIN_PERC = this.commonService.avgOfArray(grosS_MARGIN_PERC)
        this.model.stocK_VALUE = this.commonService.sumArray(this.model.stock_Avg)
        this.model.LYstocK_VALUE = this.commonService.sumArray(this.model.LYstock_Avg)
        this.model.LY_N_CUSTOMERS = this.commonService.sumArray(this.model.LY_NUMBER_CUSTOMERS)

        // this.model.averagE_TICKET_SIZE = this.commonService.sumArray(averagE_TICKET_SIZE)
        this.model.averagE_TICKET_SIZE = this.model.revenueSum/this.model.QUANTITYSum
        this.model.LYaveragE_TICKET_SIZE = this.commonService.avgOfArray(this.model.LYASP_value)
        this.model.stoR_VALUE = this.commonService.sumArray(stoR_VALUE)
        // this.model.stoR_VALUE = Math.trunc(this.model.stoR_VALUE)
        this.model.numCUSTOMERSTotal = this.commonService.sumArray(numbeR_OF_CUSTOMERS)
        //sumoftotalnumber of customers
        this.model.numbeR_OF_CUSTOMERS = ((this.model.numCUSTOMERSTotal - this.commonService.sumArray(lY_NUMBER_OF_CUSTOMERS)) / this.commonService.sumArray(lY_NUMBER_OF_CUSTOMERS)) * 100
        this.model.numbeR_OF_CUSTOMERS = Math.trunc(this.model.numbeR_OF_CUSTOMERS)
        //find last year percentage
        this.model.revenuePercentage = (this.model.revenueSum - this.commonService.sumArray(this.graphLyRevenueResponse)) / this.commonService.sumArray(this.graphLyRevenueResponse)
        this.model.revenuePercentage = this.model.revenuePercentage * 100

        this.model.grossPercentage = (this.model.grosS_MARGIN - this.commonService.sumArray(lY_GROSS_MARGIN)) / this.commonService.sumArray(lY_GROSS_MARGIN)
        this.model.grossPercentage = this.model.grossPercentage * 100

        this.model.grossPerPercentage = (this.model.grosS_MARGIN_PERC - this.commonService.avgOfArray(lY_GROSS_MARGIN_PERC)) / this.commonService.avgOfArray(lY_GROSS_MARGIN_PERC)
        this.model.grossPerPercentage = Math.trunc(this.model.grossPerPercentage * 100)

        this.model.stocK_VALUEPercentage = (this.model.stocK_VALUE - this.model.LYstocK_VALUE) / this.model.LYstocK_VALUE
        this.model.stocK_VALUEPercentage = Math.trunc(this.model.stocK_VALUEPercentage * 100)

        this.model.averagE_TICKET_SIZEPercentage = (this.model.averagE_TICKET_SIZE - this.model.LYaveragE_TICKET_SIZE) / this.model.LYaveragE_TICKET_SIZE
        this.model.averagE_TICKET_SIZEPercentage = Math.trunc(this.model.averagE_TICKET_SIZEPercentage * 100)

        this.model.stoR_VALUEPercentage = (this.model.stoR_VALUE - this.commonService.sumArray(lY_STOR_VALUE)) / this.commonService.sumArray(lY_STOR_VALUE)
        this.model.stoR_VALUEPercentage = this.model.stoR_VALUEPercentage * 100

        //format to million and thousand avgOfArray
        this.model.revenueSum = this.commonService.numberFormatter(this.model.revenueSum)
        this.model.grosS_MARGIN = this.commonService.numberFormatter(this.model.grosS_MARGIN)
        // this.model.stocK_VALUE = this.commonService.numberFormatter(this.model.stocK_VALUE)
        this.model.grosS_MARGIN_PERC = this.commonService.numberFormatter(this.model.grosS_MARGIN_PERC.toFixed(1))
        this.model.stoR_VALUE = this.commonService.numberFormatter(this.model.stoR_VALUE)

        //graphcanvasdata
        this.lineChartData.labels = this.graphDatalabel;
        this.lineChartData.datasets[0].data = this.graphRevenueResponse;
        // this.lineChartData.datasets[1].data = this.graphLyRevenueResponse;

        this.grossMarginChartData.labels = this.graphDatalabel;
        this.grossMarginChartData.datasets[0].data = grosS_MARGIN;
        // this.grossMarginChartData.datasets[1].data = lY_GROSS_MARGIN;

        this.grossMarginPercChartData.labels = this.graphDatalabel;
        this.grossMarginPercChartData.datasets[0].data = grosS_MARGIN_PERC;
        // this.grossMarginPercChartData.datasets[1].data = lY_GROSS_MARGIN_PERC;

        this.stockValueChartData.labels = this.graphDatalabel;
        this.stockValueChartData.datasets[0].data = stocK_VALUE;
        // this.stockValueChartData.datasets[1].data = lY_STOCK_VALUE;

        this.AvgTicketSizeChartData.labels = this.graphDatalabel;
        this.AvgTicketSizeChartData.datasets[0].data = averagE_TICKET_SIZE;
        // this.AvgTicketSizeChartData.datasets[1].data = lY_AVERAGE_TICKET_SIZE;

        this.storValueChartData.labels = this.graphDatalabel;
        this.storValueChartData.datasets[0].data = stoR_VALUE;
        // this.storValueChartData.datasets[1].data = lY_STOR_VALUE;
      } else {
        alert(response.status);
      }
    })
  }

  /** chart type change function */
  changeGraphType(data: any) {
    this.lineChartType = data
  }
  changeGraphType2(data: any) {
    this.lineChartType2 = data
  }
  changeGraphType3(data: any) {
    this.lineChartType3 = data
  }
  changeGraphType4(data: any) {
    this.lineChartType4 = data
  }
  changeGraphType5(data: any) {
    this.lineChartType5 = data
  }
  changeGraphType6(data: any) {
    this.lineChartType6 = data
  }
  /**purpose: set chart options */
  getLayoutMode() {
    let layoutmode = document.body.getAttribute('data-layout-mode');
    if (layoutmode) {
      this.LayoutMode = layoutmode;
      this.setChartOptions(layoutmode)
    }
    // event to get selected mode from rightsidebar
    this.eventService.subscribe('changeMode', (mode) => {
      if (mode) {
        this.LayoutMode = mode;
        this.setChartOptions(mode)
      }
    });
  }
  /**purpose: set chart options on selected layout mode */
  setChartOptions(layoutmode: any) {
    let layoutDataSet: any = {}
    if (layoutmode == "dark") {
      layoutDataSet.gridLineColor = 'white'
      layoutDataSet.LabelColor = 'white'
      layoutDataSet.LegendColor = '#03273c'
    } else if (layoutmode == 'light') {
      layoutDataSet.gridLineColor = 'grey'
      layoutDataSet.LabelColor = 'grey'
      layoutDataSet.LegendColor = 'white'
    }
    //chartoption change
    this.lineChartOptions = {
      responsive: true,
      scales: {
        y: {
          display: true,
          grid: {
            display: true,
            color: layoutDataSet.gridLineColor,
            lineWidth: 0.3
            // drawTicks: false
          },
          ticks: {
            color: layoutDataSet.LabelColor,
            // Include a dollar sign in the ticks
            callback: function (value: any, index, ticks) {
              if (value >= 1000000) {
                // Convert to millions
                const millions = value / 1000000;
                const decimalPlaces = 2
                const multiplier = Math.pow(10, decimalPlaces);
                const roundedValue = Math.floor(millions * multiplier) / multiplier;
                return roundedValue.toFixed(decimalPlaces) + "M";
              } else if (value >= 1000) {
                // Convert to thousands
                const thousands = value / 1000;
                const decimalPlaces = 1
                const multiplier = Math.pow(10, decimalPlaces);
                const roundedValue = Math.floor(thousands * multiplier) / multiplier;
                return roundedValue.toFixed(decimalPlaces) + "K";
              }
              if (value < 1 && value > -1) {
                return value.toFixed(4);
              }
              return (value);
            }
          }
        },
        x: {
          grid: {
            display: false
          },
          ticks: {
            color: layoutDataSet.LabelColor,
          }
        },
      },
      elements: {
        point: {
          radius: 2
        },
      },

      plugins: {
        legend: {
          display: true,
          align: 'end',
          labels: {
            color: layoutDataSet.LegendColor,
            boxWidth: 0,
            font: {
              size: 9
            },
            padding: 5,
          }
        },
        datalabels: {
          color: layoutDataSet.LabelColor,
          anchor: 'end',
          align: 'end',
          font: {
            size: 10
          },
          padding: 5,
          formatter: function (value: any) {
            if (value >= 1000000) {
              // Convert to millions
              const millions = value / 1000000;
              const decimalPlaces = 2
              const multiplier = Math.pow(10, decimalPlaces);
              const roundedValue = Math.floor(millions * multiplier) / multiplier;
              return roundedValue.toFixed(decimalPlaces) + "M";
            } else if (value >= 1000) {
              // Convert to thousands
              const thousands = value / 1000;
              const decimalPlaces = 1
              const multiplier = Math.pow(10, decimalPlaces);
              const roundedValue = Math.floor(thousands * multiplier) / multiplier;
              return roundedValue.toFixed(decimalPlaces) + "K";
            }
            if (value < 1 && value > -1) {
              return value.toFixed(4);
            }
            return (value);
          }
        }
      }
    };
    //chartoption change GM %
    this.GMPlineChartOptions = {
      responsive: true,
      scales: {
        y: {
          display: true,
          grid: {
            display: true,
            color: layoutDataSet.gridLineColor,
            lineWidth: 0.3
            // drawTicks: false
          },
          ticks: {
            color: layoutDataSet.LabelColor,
            // Include a dollar sign in the ticks
            callback: function (value: any, index, ticks) {
              return value + '%'
            }
          }
        },
        x: {
          grid: {
            display: false
          },
          ticks: {
            color: layoutDataSet.LabelColor,
          }
        },
      },
      elements: {
        point: {
          radius: 2
        },
      },

      plugins: {
        tooltip: {
          callbacks: {
            label: function (context: any) {
              let label = context.dataset.label || '';

              if (label) {
                label += ': ';
              }
              if (context.parsed.y !== null || (context.parsed.y >= 10 && context.parsed.y <= 100)) {
                label += (context.parsed.y) + '%';
              }
              return label;
            }
          }
        },
        legend: {
          display: true,
          align: 'end',
          labels: {
            color: layoutDataSet.LegendColor,
            boxWidth: 0,
            font: {
              size: 9
            },
            padding: 5,
          }
        },
        datalabels: {
          color: layoutDataSet.LabelColor,
          anchor: 'end',
          align: 'end',
          font: {
            size: 10
          },
          padding: 5,
          formatter: function (value: any) {
            return value + '%'
          }
        }
      }
    };
  }
  // line chart  options
  public lineChartOptions: ChartConfiguration['options'];
  public GMPlineChartOptions: ChartConfiguration['options'];
  public barChartPlugins = [
    DataLabelsPlugin
  ];
  /* chart data config */
  public lineChartType: ChartType = 'bar';
  public lineChartType2: ChartType = 'bar';
  public lineChartType3: ChartType = 'bar';
  public lineChartType4: ChartType = 'bar';
  public lineChartType5: ChartType = 'bar';
  public lineChartType6: ChartType = 'bar';
  /**charts configuaration*/
  public lineChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "Revenue",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY Revenue",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };

  public grossMarginChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "Gross Margin",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY GrossMargin",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };
  public grossMarginPercChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "Gross Margin %",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY GrossMarginPercentage",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };
  public stockValueChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "Stock Value",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY StockValue",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };
  public AvgTicketSizeChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "Average Selling Price",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY AverageTicketSize",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };
  public storValueChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        "data": [],
        "label": "STOR VALUE",
        "backgroundColor": '#3599CC',
        "borderColor": '#3599CC',
        "pointBackgroundColor": '#3599CC',
        "pointBorderColor": '#3599CC',
        "pointHoverBackgroundColor": '#3599CC',
        "pointHoverBorderColor": '#3599CC',
      }
      // {
      //   "data": [],
      //   "label": "LY StorValue",
      //   "backgroundColor": '#E6E8EC',
      //   "borderColor": '#E6E8EC',
      //   "pointBackgroundColor": '#E6E8EC',
      //   "pointBorderColor": '#E6E8EC',
      //   "pointHoverBackgroundColor": '#E6E8EC',
      //   "pointHoverBorderColor": '#E6E8EC',
      // },
    ],
    labels: []
  };
}
